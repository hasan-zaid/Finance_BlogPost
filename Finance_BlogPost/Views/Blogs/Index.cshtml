@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@model Finance_BlogPost.Models.ViewModels.BlogDetailsViewModel

@{
	// This changes the tab title to the blog page title, which is important for SEO as searchbots read this
	ViewData["Title"] = Model.PageTitle;
}

<!-- Container for the blog post content -->
<div class="container my-5">
	<div class="row justify-content-center">
		<div class="col-12 col-lg-6">

			<!-- Check if the blog post model is not null -->
			@if (Model != null)
			{
				<!-- Display the blog post's heading -->
				<h1 class="mb-3">@Model.Heading</h1>

				<!-- Display the author and published date of the blog post -->
				<div class="d-flex justify-content-between mb-3">
					<span class="text-secondary">@Model.Author.UserName</span>
					<span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
				</div>

				<!-- Display the number of likes for the blog post -->
				<div class="mb-3">
					<!-- Check if the user is signed in -->
					@if (signInManager.IsSignedIn(User))
					{
						<a id="btnLike" style="cursor: pointer;">
							<!-- Check if the user has already liked the blog post -->
							@if (Model.Liked)
							{
								<!-- If the user has liked the blog post, display the filled thumbs up icon -->
								<i class="bi bi-hand-thumbs-up-fill"></i>
							}
							else
							{
								<!-- If the user has not liked the blog post, display the empty thumbs up icon -->
								<i class="bi bi-hand-thumbs-up"></i>
							}
						</a>
					}
					<span id="totalLikes">@Model.TotalLikes</span> likes
				</div>

				<!-- Display the tags associated with the blog post -->
				<div class="mb-3 d-flex">
					@foreach (var tag in Model.Tags)
					{
						<span class="badge bg-secondary me-1">@tag.Name</span>
					}
				</div>

				<!-- Display the featured image of the blog post -->
				<img src="@Model.BlogImageUrl" class="d-block img-fluid mb-3" />

				<!-- Display the content of the blog post -->
				<div class="mb-3 blog-details-content">
					@Html.Raw(Model.Content)
				</div>

				<!-- Display the comments for the blog post -->
				<div class="card">

					<!-- Card Header for Comments -->
					<div class="card-header">
						<h5>Comments</h5>

						<!-- Check if the user is signed in -->
						@if (signInManager.IsSignedIn(User))
						{
							<!-- Display the comment form if the user is signed in -->
							<form method="post">
								<div class="mb-3">
									<label class="form-label">Submit one today!</label>
									<input type="text" class="form-control" maxlength="255" asp-for="CommentDescription" />
								</div>
								<div class="mb-3">
									<button type="submit" class="btn btn-dark">Submit</button>
									<!-- The hidden input fields below are used to send the corresponding signed in user id and url handle for the specific blog page accessed to the BlogsController -->
									<input type="hidden" asp-for="Id" />
									<input type="hidden" asp-for="UrlHandle" />
								</div>
							</form>
						}
					</div>

					<!-- Card Body for Comments -->
					<div class="card-body">
						<!-- Check if there are any comments for the blog post -->
						@if (Model.Comments != null && Model.Comments.Any())
						{
							<!-- If there are comments, loop through them and display them -->
							@foreach (var comment in Model.Comments.Where(c => c.ParentCommentId == null))
							{
								<!-- Individual Comment Card -->
								<div class="card mb-3">
									<div class="card-body">
										<!-- Comment Description -->
										<div class="d-flex justify-content-between">
											<span>@comment.Description</span>
											@if (signInManager.IsSignedIn(User) && userManager.GetUserId(User) == comment.UserId.ToString())
											{
												{
													<!-- Delete Button -->
													<form id="deleteCommentForm-@comment.CommentId" method="post">
														<input type="hidden" name="commentId" value="@comment.CommentId" />
														<input type="hidden" name="urlHandle" value="@Model.UrlHandle" />
														<button type="button" style="border: 0; background-color: transparent;" onclick="confirmDelete('@comment.CommentId')">
															<i class="bi bi-trash-fill"></i>
														</button>
													</form>
												}
											}
										</div>
										<!-- User Info and Date -->
										<div class="d-flex justify-content-between">
											<span class="text-secondary">Posted by: @comment.Username</span>
											<!-- ToString("o") formats the DateAdded property of the comment as an ISO 8601 string (e.g., 2023-07-07T12:34:56.789Z). The "o" format specifier ensures the date is in a standard format that Day.js can easily parse. After the Razor engine processes the page, it generates the HTML code below, with the data-date attribute containing the formatted date.-->
											@*<span class="text-secondary comment-date" data-date="2023-07-07T12:34:56.789Z"></span>*@
											<span class="text-secondary comment-date" data-date="@comment.PublishedDate.ToString("o")"></span>
										</div>
									</div>
									<!-- Check if the user is signed in -->
									@if (signInManager.IsSignedIn(User))
									{
										<form method="post">
											<div class="p-3 d-flex flex-row justify-content-between align-items-center">
												<div class="flex-row d-flex"><div>Reply:&nbsp;&nbsp;</div><div><input type="text" maxlength="255" class="form-control" asp-for="CommentDescription" /></div></div>
												<button type="submit" class="btn btn-dark">Submit</button>
												<!-- The hidden input fields below are used to send the corresponding signed in user id and url handle for the specific blog page accessed to the BlogsController -->
												<input type="hidden" asp-for="Id" />
												<input type="hidden" asp-for="ParentCommentId" value="@comment.CommentId" />
												<input type="hidden" asp-for="UrlHandle" />
											</div>
										</form>
									}

									@if (Model.Comments.Any(c => c.ParentCommentId == comment.CommentId))
									{
										@foreach (var reply in Model.Comments.Where(c => c.ParentCommentId == comment.CommentId))
										{
											<hr style="margin: 0;">
											<div class="card-body ms-5">
												<!-- Comment Description -->
												<div class="d-flex justify-content-between">
													@reply.Description
													@if (signInManager.IsSignedIn(User) && userManager.GetUserId(User) == reply.UserId.ToString())
													{
														<!-- Delete Button -->
														<form id="deleteCommentForm-@reply.CommentId" method="post">
															<input type="hidden" name="commentId" value="@reply.CommentId" />
															<button type="button" style="border: 0; background-color: transparent;" onclick="confirmDelete('@reply.CommentId')">
																<i class="bi bi-trash-fill"></i>
															</button>
														</form>
													}
												</div>
												<!-- User Info and Date -->
												<div class="d-flex justify-content-between">
													<span class="text-secondary">Replied by: @reply.Username</span>
													<!-- ToString("o") formats the DateAdded property of the comment as an ISO 8601 string (e.g., 2023-07-07T12:34:56.789Z). The "o" format specifier ensures the date is in a standard format that Day.js can easily parse. After the Razor engine processes the page, it generates the HTML code below, with the data-date attribute containing the formatted date.-->
													@*<span class="text-secondary comment-date" data-date="2023-07-07T12:34:56.789Z"></span>*@
													<span class="text-secondary comment-date" data-date="@reply.PublishedDate.ToString("o")"></span>
												</div>
											</div>
										}
									}
								</div>
							}
						}
					</div>
				</div>
			}
			else
			{
				<!-- Display a message if the blog post is not found -->
				<p>Blog Post not found!</p>
			}

		</div>
	</div>
</div>

@section Scripts {
	@* Pass initialLiked, blogId, and userId to likeFeature.js *@
	<script>
		// Enclosed in single quotes to be interpreted correctly as JS
		const initialLiked = '@Model.Liked';
		const blogId = '@Model.Id';
		const userId = '@userManager.GetUserId(User)';
	</script>
	<script src="~/js/likeFeature.js"></script>

	<!-- Include Day.js and the relativeTime plugin, which allows us to format dates as relative times (e.g., "3 hours ago"). -->
	<script src="https://cdn.jsdelivr.net/npm/dayjs/dayjs.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/dayjs/plugin/relativeTime.js"></script>
	<script src="~/js/relativeCommentTiming.js"></script>

	<!-- Include the _DeleteConfirmation partial -->
	@Html.Partial("_DeleteCommentConfirmation")
}
