@model Finance_BlogPost.Models.ViewModels.HomeViewModel

@{
	ViewData["Title"] = "Home Page";
}

<!-- Hero Section -->
<div class="hero-section d-flex align-items-center justify-content-center text-center text-white" style="background-image: url('https://thumbs.dreamstime.com/b/business-concept-money-finance-economy-wallpaper-background-design-rich-illustration-image-ai-processing-involves-analyzing-324633229.jpg');">
	<div class="container rounded-hero bg-dark-opacity">
		<h1 class="display-4 fw-bold">Welcome to FinInsight</h1>
		<p class="lead">
			Your one-stop blog website for insightful content on all things finance!
		</p>
	</div>
</div>

<div class="container mt-5">
	<div class="row">
		<!-- Main Content -->
		<div class="col-lg-8 order-2 order-lg-1">
			<!-- Blog Posts Section -->
			<div class="row">
				@if (Model != null && Model.BlogPosts.Any())
				{
					foreach (var blogPost in Model.BlogPosts)
					{
						<div class="col-lg-6 col-md-12 mb-4">
							<div class="card h-80 fixed-card-height">
								<img src="@blogPost.BlogImageUrl" class="fixed-img-height" alt="@blogPost.Heading">
								<div class="card-body d-flex flex-column">
									<p class="card-text text-muted">@blogPost.PublishedDate.ToShortDateString()</p>
									<p>
										@foreach (var tag in blogPost.Tags)
										{
											<span class="badge dark-badge">@tag.Name</span>
										}
									</p>
									<h5 class="card-title">@blogPost.Heading</h5>
									<p class="card-text text-muted">Author: @blogPost.Author.UserName <p>
									<p class="card-text short-description">@blogPost.ShortDescription</p>
									<div class="mt-auto">

										<a href="@Url.Action("Index", "Blogs", new { urlHandle = blogPost.UrlHandle })" class="btn light-btn mt-3">Read More</a>
									</div>
								</div>
							</div>
						</div>
					}
				}
				else
				{
					<div class="col-12">
						<div class="alert alert-success text-center">
							No blogs match your search.
						</div>
					</div>
				}
			</div>
		</div>

		<!-- Sidebar -->
		<div class="col-lg-4 order-1 order-lg-2 mb-4 mb-lg-0">
			<div class="sticky-top">
				<!-- Search Section -->
				<div class="card shadow-sm p-3 mb-4">
					<div class="d-flex align-items-center mb-3">
						<h2 class="h4">Search Blogs</h2>
						@* Check if there is a search query and a tag selected; if so, display the refresh icon to clear search results while retaining the tag *@
						@if (Context.Request.Method == "GET" && !string.IsNullOrEmpty(Context.Request.Query["searchQuery"]) && !string.IsNullOrEmpty(Context.Request.Query["tag"]))
						{
							<a class="ms-2 refresh-icon" href="@Url.Action("Index", "Home", new { tag = Context.Request.Query["tag"] })" data-bs-toggle="tooltip" data-bs-placement="top" title="Clear Search Results">
								<i class="bi bi-arrow-clockwise"></i>
							</a>
						}
						@* Check if there is only a search query; if so, display the refresh icon to clear the search results *@
						else if (Context.Request.Method == "GET" && !string.IsNullOrEmpty(Context.Request.Query["searchQuery"]))
						{
							<a class="ms-2 refresh-icon" href="@Url.Action("Index", "Home")" data-bs-toggle="tooltip" data-bs-placement="top" title="Clear Search Results">
								<i class="bi bi-arrow-clockwise"></i>
							</a>
						}
					</div>
					<form method="get" asp-controller="Home" asp-action="Index" class="d-flex">
						<input type="text" class="form-control me-2" placeholder="Enter here..." name="searchQuery" value="@ViewBag.SearchQuery" required>
						@* Preserve the tag if it is selected while performing a search *@
						@if (!string.IsNullOrEmpty(ViewBag.Tag))
						{
							<input type="hidden" name="tag" value="@ViewBag.Tag" />
						}
						<button type="submit" class="btn light-btn">Search</button>
					</form>
				</div>

				<!-- Tags Section -->
				<div class="card shadow-sm p-3">
					<div class="d-flex align-items-center mb-3">
						<h2 class="h4">Browse by Tags</h2>
						@* Check if a tag is selected; if so, display the refresh icon to clear all tags *@
						@if (Context.Request.Method == "GET" && !string.IsNullOrEmpty(Context.Request.Query["tag"]))
						{
							<a class="ms-2 refresh-icon" href="@Url.Action("Index", "Home", new { searchQuery = Context.Request.Query["searchQuery"] })" data-bs-toggle="tooltip" data-bs-placement="top" title="Clear All Tags">
								<i class="bi bi-arrow-clockwise"></i>
							</a>
						}
					</div>
					<div class="d-flex flex-wrap">
						@* Display the list of tags *@
						@if (Model != null && Model.Tags.Any())
						{
							foreach (var tag in Model.Tags)
							{
								@* Check if the current tag is active (selected) *@
								var isActive = Context.Request.Query["tag"] == tag.Name;
								@* Set the badge class based on whether the tag is active or not *@
								var badgeClass = isActive ? "badge dark-badge me-2 mb-2 text-decoration-none" : "badge light-btn me-2 mb-2 text-decoration-none";
								<a href="@Url.Action("Index", "Home", new { searchQuery = Context.Request.Query["searchQuery"], tag = tag.Name })" class="@badgeClass">
									@tag.Name
								</a>
							}
						}
					</div>
				</div>
			</div>
		</div>

	</div>
</div>

<!-- Add the following script for the tooltip to work -->
<script>
	document.addEventListener('DOMContentLoaded', function () {
		var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
		var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
			return new bootstrap.Tooltip(tooltipTriggerEl)
		})
	});
</script>
